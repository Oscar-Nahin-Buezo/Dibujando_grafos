/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package grafos;

import grafos.Grafo.Vertice;
import grafos.Grafo.edge;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Nahin
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    Grafo myGrafo = new Grafo();

    int posicionx = 0;
    int posiciony = 0;
    Random random = new Random();
    int ultima_posicionx = 0;
    int ultima_posiciony = 0;

    public main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        etiqueta_vertice = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        vertice_a = new javax.swing.JTextField();
        vertice_b = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        dibujar_grafo = new javax.swing.JButton();
        calcular_grado_vertice = new javax.swing.JButton();
        suma_grados_vertices = new javax.swing.JButton();
        grado_menor_vertices = new javax.swing.JButton();
        solicitar_camino = new javax.swing.JButton();
        buscar_ciclos = new javax.swing.JButton();
        agregar_vertice = new javax.swing.JButton();
        agregar_arista = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        label_grafo = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        label_grado_grafo = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        label_suma_grados = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        label_grado_menor = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        peso_arista = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        label_ciclo = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jLabel6.setText("jLabel6");

        jLabel12.setText("jLabel12");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(240, 170, 130));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel1.setText("Dibujo de grafos");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(497, 497, 497)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jLabel2.setText("Vertices");

        jLabel3.setText("Etiqueta:");

        jLabel4.setText("Aristas");

        jLabel7.setText("Vertice a");

        jLabel8.setText("vertice b");

        dibujar_grafo.setBackground(new java.awt.Color(102, 255, 102));
        dibujar_grafo.setText("Dibujar grafo");
        dibujar_grafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dibujar_grafoActionPerformed(evt);
            }
        });

        calcular_grado_vertice.setText("Culcular grado del grafo");
        calcular_grado_vertice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcular_grado_verticeActionPerformed(evt);
            }
        });

        suma_grados_vertices.setText("Suma de grados de vertices");
        suma_grados_vertices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suma_grados_verticesActionPerformed(evt);
            }
        });

        grado_menor_vertices.setText("Grado menor entre vertices");
        grado_menor_vertices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grado_menor_verticesActionPerformed(evt);
            }
        });

        solicitar_camino.setText("Solicitar camino");
        solicitar_camino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solicitar_caminoActionPerformed(evt);
            }
        });

        buscar_ciclos.setText("Hay ciclos?");
        buscar_ciclos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscar_ciclosActionPerformed(evt);
            }
        });

        agregar_vertice.setText("Agregar vertice");
        agregar_vertice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregar_verticeActionPerformed(evt);
            }
        });

        agregar_arista.setText("Agregar arista");
        agregar_arista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregar_aristaActionPerformed(evt);
            }
        });

        jLabel9.setText("Grafo:");

        label_grafo.setText("grafo aqui");

        jLabel11.setText("Grado del grafo:");

        label_grado_grafo.setText("grado aqui");

        jLabel13.setText("Suma de grados:");

        label_suma_grados.setText("Suma de grados aqui");

        jLabel15.setText("Grado menor vertices:");

        label_grado_menor.setText("Grado menor aqui");

        jLabel10.setText("Peso de arista");

        jLabel14.setText("Hay ciclo?:");

        label_ciclo.setText("Calcular");

        jButton1.setBackground(new java.awt.Color(255, 51, 51));
        jButton1.setText("Eliminar");

        jButton2.setText("Eliminar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(calcular_grado_vertice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dibujar_grafo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(suma_grados_vertices, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(grado_menor_vertices, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(solicitar_camino, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(buscar_ciclos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label_grado_grafo, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(label_suma_grados, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(label_grafo, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_grado_menor, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label_ciclo, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(26, 26, 26)
                                .addComponent(etiqueta_vertice, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(agregar_vertice, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jLabel4)
                                        .addGap(199, 199, 199))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(42, 42, 42)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(vertice_a, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(agregar_arista, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel7))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addComponent(vertice_b, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(peso_arista, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10))))
                        .addGap(0, 428, Short.MAX_VALUE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agregar_vertice, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(etiqueta_vertice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vertice_a, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vertice_b, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(peso_arista, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agregar_arista, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(solicitar_camino, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                            .addComponent(suma_grados_vertices, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dibujar_grafo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buscar_ciclos, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                            .addComponent(grado_menor_vertices, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                            .addComponent(calcular_grado_vertice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label_grafo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(label_grado_grafo, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(label_suma_grados, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(label_grado_menor, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(label_ciclo))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void agregar_verticeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregar_verticeActionPerformed
        // TODO add your handling code here:
        if ("".equals(this.etiqueta_vertice.getText())) {
            JOptionPane.showMessageDialog(null, "Debe ingresar una etiqueta para el vertice");
        } else {
            boolean existe = false;
            String nombre = this.etiqueta_vertice.getText();
            ArrayList<Vertice> nodos = this.myGrafo.getVertices();
            for (Vertice n : nodos) {
                if (nombre.equalsIgnoreCase(n.name)) {
                    existe = true;
                }
            }
            if (existe) {
                JOptionPane.showMessageDialog(rootPane, "Ya existe este nodo, prueba otra etiqueta");
            } else {

                this.generar_posicion(nodos);
                this.myGrafo.addVertice(nombre, this.posicionx, this.posiciony);
                this.imprimir_grafo();
                this.etiqueta_vertice.setText("");
            }
        }
    }//GEN-LAST:event_agregar_verticeActionPerformed

    private void agregar_aristaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregar_aristaActionPerformed
        // TODO add your handling code here:
        if (this.vertice_a.getText().equalsIgnoreCase("") || this.vertice_b.getText().equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(rootPane, "Debe ingresar los vertices que quiere unir");
        } else {
            try {
                boolean existeA = false;
                boolean existeB = false;
                int posA = 0;
                int posB = 0;
                int peso = Integer.parseInt(this.peso_arista.getText());
                ArrayList<edge> my_aristas = this.myGrafo.getEdges();
                ArrayList<Vertice> nodos = this.myGrafo.getVertices();
                String verticeA = this.vertice_a.getText();
                String verticeB = this.vertice_b.getText();
                for (Vertice nodo : nodos) {
                    if (nodo.name.equalsIgnoreCase(verticeA)) {
                        existeA = true;
                        posA = nodos.indexOf(nodo);
                    }
                }
                for (Vertice nodo : nodos) {
                    if (nodo.name.equalsIgnoreCase(verticeB)) {
                        existeB = true;
                        posB = nodos.indexOf(nodo);
                    }
                }
                if (existeA && existeB) {
                    boolean existe = false;

                    for (edge arista : my_aristas) {
                        if (arista.verticeA.equalsIgnoreCase(verticeA) || arista.verticeA.equalsIgnoreCase(verticeB)) {
                            if (arista.verticeB.equalsIgnoreCase(verticeA) || arista.verticeB.equalsIgnoreCase(verticeB)) {
                                existe = true;
                            }
                        }
                    }
                    if (existe) {
                        JOptionPane.showMessageDialog(rootPane, "Ya existe esta arista entre ambos vertices");
                    } else {
                        this.myGrafo.addEdge(posA, posB, peso, verticeA, verticeB);
                        this.imprimir_grafo();
                        this.vertice_a.setText("");
                        this.vertice_b.setText("");
                        this.peso_arista.setText("");

                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Debe Ingresar vertices validos");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Algo salio mal, tome en cuenta:\n1. Ingrese solo numeros en el peso de la arista"
                        + "\n.2 Ingrese vertices existentes");
            }

        }
    }//GEN-LAST:event_agregar_aristaActionPerformed

    private void dibujar_grafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dibujar_grafoActionPerformed
        // TODO add your handling code here:
        //Aqui llamamos el frame que contiene el dibujo de grafo
        //myGrafo.setSize(400,300);
        myGrafo.setSize(1200, 1100);
        myGrafo.setVisible(true);
    }//GEN-LAST:event_dibujar_grafoActionPerformed

    private void calcular_grado_verticeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcular_grado_verticeActionPerformed
        // TODO add your handling code here:
        ArrayList<edge> edges = this.myGrafo.getEdges();
        int grado = edges.size() * 2;
        this.label_grado_grafo.setText(Integer.toString(grado));
    }//GEN-LAST:event_calcular_grado_verticeActionPerformed

    private void buscar_ciclosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscar_ciclosActionPerformed
        // TODO add your handling code here:
        ArrayList<Vertice> nodos = this.myGrafo.getVertices();
        ArrayList<edge> edges = this.myGrafo.getEdges();
        int cont_ciclos = 0;
        if (edges.size() >= nodos.size()) {
            this.label_ciclo.setText(" Hay ciclo");
        } else {
            if (edges.size() >= 3) {

                for (edge referencia : edges) {
                    ArrayList<String> adyasenciaA = new ArrayList();
                    ArrayList<String> adyasenciaB = new ArrayList();
                    for (edge e : edges) {
                        // if (e != referencia) {
                        if (e.getVerticeA().equalsIgnoreCase(referencia.getVerticeA())) {
                            if (adyasenciaA.contains(e.getVerticeA())) {

                            } else {
                                adyasenciaA.add(e.getVerticeA());
                            }

                        }
                        if (e.getVerticeB().equalsIgnoreCase(referencia.getVerticeA())) {
                            if (adyasenciaA.contains(e.getVerticeB())) {

                            } else {
                                adyasenciaA.add(e.getVerticeB());
                            }
                        }
                        if (e.getVerticeA().equalsIgnoreCase(referencia.getVerticeB())) {
                            if (adyasenciaB.contains(e.getVerticeA())) {

                            } else {
                                adyasenciaB.add(e.getVerticeA());
                            }
                        }
                        if (e.getVerticeB().equalsIgnoreCase(referencia.getVerticeB())) {
                            if (adyasenciaB.contains(e.getVerticeB())) {

                            } else {
                                adyasenciaB.add(e.getVerticeB());
                            }
                        }
                        // }

                    }
                    if (adyasenciaA.isEmpty() || adyasenciaA.isEmpty()) {

                    } else {
                        String aa = "";
                        String bb = "";
                        for (String c : adyasenciaA) {
                            aa += c;
                        }
                        for (String c : adyasenciaB) {
                            bb += c;
                        }
                        System.out.println("Arista referencia: " + referencia.getVerticeA() + referencia.getVerticeB());
                        System.out.println("AdyasenciaA: " + aa);
                        System.out.println("AdyasenciaB: " + bb);

                        for (String vertice : adyasenciaA) {
                            for (String verticeB : adyasenciaB) {
                                if (verticeB.equalsIgnoreCase(vertice)) {

                                    cont_ciclos++;
                                }
                            }
                        }
                    }
                }
                if (cont_ciclos > 0) {
                    System.out.println("Entro con: " + cont_ciclos);
                    this.label_ciclo.setText("Hay ciclo");
                } else {
                    this.label_ciclo.setText("No hay ciclo");
                }

            } else {
                this.label_ciclo.setText("No hay ciclo");
            }
        }
    }//GEN-LAST:event_buscar_ciclosActionPerformed

    private void suma_grados_verticesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suma_grados_verticesActionPerformed
        // TODO add your handling code here:
        ArrayList<edge> edges = this.myGrafo.getEdges();
        String suma = String.valueOf(edges.size() * 2);
        this.label_suma_grados.setText(suma);
    }//GEN-LAST:event_suma_grados_verticesActionPerformed

    private void grado_menor_verticesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grado_menor_verticesActionPerformed
        // TODO add your handling code here:
        ArrayList<edge> edges = this.myGrafo.getEdges();
        ArrayList<Vertice> nodos = this.myGrafo.getVertices();
        int menor = edges.size();
        for (Vertice n : nodos) {
            int grado_temp = 0;
            for (edge e : edges) {
                if (e.verticeA.equals(n.name) || e.verticeB.equalsIgnoreCase(n.name)) {
                    grado_temp++;
                }
            }
            if (menor > grado_temp) {
                menor = grado_temp;
            }
        }
        this.label_grado_menor.setText(Integer.toString(menor));

    }//GEN-LAST:event_grado_menor_verticesActionPerformed

    private void solicitar_caminoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solicitar_caminoActionPerformed
        // TODO add your handling code here:
        try {
            ArrayList<edge> edges = this.myGrafo.getEdges();
            String camino = JOptionPane.showInputDialog(null, "Introduzca el camino que solicita(solo vertices con - entre ellos)", "Buscador de caminos", JOptionPane.QUESTION_MESSAGE);
            if (camino.length() < 3) {
                JOptionPane.showMessageDialog(null, "Debes ingresar por lo menos dos vertices existentes y separados con (-)");
            } else {
                if (camino.charAt(0) == '-' || camino.charAt(camino.length() - 1) == '-') {
                    JOptionPane.showMessageDialog(rootPane, "No coloques (-) al inicio o final (-a-b-)");
                } else {
                    String[] partes = camino.split("-");
                    for(String ca: partes){
                        System.out.println(ca);
                    }
                    if (expresion_correcta(partes)) {
                        boolean existe_camino = false;
                        int aristas_existentes = 0;
                        for (int i = 0; i < partes.length; i++) {
                            boolean real = false;
                            if (i < partes.length - 1) {
                                String v1 = partes[i];
                                String v2 = partes[i+1];
                                for (edge e : edges) {
                                    if ((e.getVerticeA().equalsIgnoreCase(v1) || e.getVerticeB().equalsIgnoreCase(v1))
                                            && (e.getVerticeB().equalsIgnoreCase(v2) || e.getVerticeB().equalsIgnoreCase(v2))) {
                                        real = true;
                                    }
                                }
                            }
                            if (real) {
                                aristas_existentes++;
                            }
                        }
                        if (aristas_existentes == (partes.length - 1)) {
                            existe_camino = true;
                            JOptionPane.showMessageDialog(rootPane, "El camino existe");
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "El camino NO existe");
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Debes ingresar el nombre de vertices existentes");
                    }
                }

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Algo salio mal, recuerda:\nColocar - entre vertices");
        }


    }//GEN-LAST:event_solicitar_caminoActionPerformed

    private void generar_posicion(ArrayList<Vertice> nn) {
        Random aleatoria = new Random();
        int valorx = ((int) Math.floor(Math.random() * (550 - 60 + 1))) + this.ultima_posicionx;
        int valory = ((int) Math.floor(Math.random() * (550 - 60 + 1))) + this.ultima_posiciony;
        this.ultima_posicionx = ((int) Math.floor(Math.random() * (150 - 50 + 1)));
        this.ultima_posiciony = ((int) Math.floor(Math.random() * (200 - 50 + 1)));;
        /**
         * boolean continuar = true; while (continuar) { boolean existe = false;
         * int power= aleatoria.nextInt(50); valorx = (((int)
         * Math.floor(Math.random() * (550 - 60 + 1) + 60)) + 25)+power; valory
         * = (((int) Math.floor(Math.random() * (600 - 60 + 1) + 80)) +
         * 30)+power; //valorx=aleatoria.nextInt(600);
         * //valorx=aleatoria.nextInt(700); for (Vertice n : nn) { if (n.x ==
         * valorx || n.y == valory) { existe = true; }else{ int basen=n.x+n.y;
         * int basep=valorx+valory; int diferencia =basen-basep; if(diferencia
         * <80) valorx+=power; valory+=power; if(diferencia <-50) valorx+=power;
         * valory+=power; } } continuar = existe;
         *
         * }*
         */
        this.posicionx = valorx;
        this.posiciony = valory;

    }

    public boolean expresion_correcta(String camino[]) {
        boolean correcto = true;
        ArrayList<Vertice> nodos = this.myGrafo.getVertices();
        for (int i = 0; i < camino.length; i++) {
            String name = "" + camino[i];
            int contador = 0;
            for (Vertice v : nodos) {
                if (v.getName().equalsIgnoreCase(name)) {
                    contador++;
                }
            }
            if (contador == 0) {
                correcto = false;
            }
        }
        return correcto;
    }

    private void imprimir_grafo() {
        String grafo = "G={{";
        ArrayList<Vertice> nodos = this.myGrafo.getVertices();
        ArrayList<edge> aristas = this.myGrafo.getEdges();
        for (Vertice n : nodos) {
            grafo += n.name + ",";
        }
        grafo += "},{";
        for (edge aris : aristas) {
            grafo += "(" + aris.getVerticeA() + " " + aris.getVerticeB() + ") ";
        }
        grafo += "}}";
        this.label_grafo.setText(grafo);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregar_arista;
    private javax.swing.JButton agregar_vertice;
    private javax.swing.JButton buscar_ciclos;
    private javax.swing.JButton calcular_grado_vertice;
    private javax.swing.JButton dibujar_grafo;
    private javax.swing.JTextField etiqueta_vertice;
    private javax.swing.JButton grado_menor_vertices;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel label_ciclo;
    private javax.swing.JLabel label_grado_grafo;
    private javax.swing.JLabel label_grado_menor;
    private javax.swing.JLabel label_grafo;
    private javax.swing.JLabel label_suma_grados;
    private javax.swing.JTextField peso_arista;
    private javax.swing.JButton solicitar_camino;
    private javax.swing.JButton suma_grados_vertices;
    private javax.swing.JTextField vertice_a;
    private javax.swing.JTextField vertice_b;
    // End of variables declaration//GEN-END:variables
}
